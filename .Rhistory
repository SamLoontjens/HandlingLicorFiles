geom_ribbon(mapping = aes(ymin = A - se, ymax = A + se, fill = PAR1), alpha = 0.5)
ggplot(tgc, aes(elapsed, gsw)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = gsw - se, ymax = gsw + se, fill = PAR1), alpha = 0.5)
ggplot(tgc, aes(elapsed, gsw)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = gsw - se, ymax = gsw + se, fill = PAR1), alpha = 0.5) +
xlim(-50, 1600)
ggplot(tgc, aes(elapsed, gsw)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = gsw - se, ymax = gsw + se, fill = PAR1), alpha = 0.5) +
xlim(-50, 1600) +
ylim(0, 0.75)
writexl::write_xlsx(x = tgc,
path = "output_directory_licorfiles/excel_files/set-1000_gsw_averaged.xlsx",
col_names = TRUE,
format_headers = FALSE)
plot_data <- function(manual_check = TRUE){
#make empty data frame
dataframe_total <- data.frame()
#check all the files
file_list <- list_licorfiles("input_directory_licorfiles/photosynthetic_induction_data")
#calculate the photosynthetic induction parameters for all files
for (filename in file_list) {
#create the pathname
filepath <- paste0("input_directory_licorfiles/",
"photosynthetic_induction_data/",
filename)
#read the file
parameters <- c('elapsed', 'A', 'Ci', 'Qin', 'gsw')
dataframe <- read_licorfile(filepath = filepath, parameters = parameters)
#get light parameters
lightinductionparameters <- calculate_light_induction_parameters(dataframe)
lightinductionindex <- lightinductionparameters[[1]]
PAR1 = lightinductionparameters[[4]]
PAR2 = lightinductionparameters[[5]]
#if light decrease index exists then that is the end of the data
if ("light_decay_index" %in% names(lightinductionparameters)) {
end_index = lightinductionparameters[["light_decay_index"]] - 1
} else {
end_index = length(dataframe$A)
}
#plot data
A <- dataframe[["A"]][(lightinductionindex-50):end_index]
elapsed <- dataframe[["elapsed"]][(lightinductionindex-50):end_index]-dataframe[["elapsed"]][[lightinductionindex]]
plot(x = elapsed, y = A)
if (manual_check) {
user_input <- readline(prompt = "(y/n)")
} else {
user_input <- "y"
}
if (user_input == "y") {
#add the values to the dataframe
dataframe_part <- data.frame(
A = A,
elapsed = plyr::round_any(elapsed, 2),
PAR1 = PAR1,
PAR2 = PAR2,
deltaPAR = PAR2 - PAR1
)
dataframe_total <- bind_rows(dataframe_total, dataframe_part)
}
}
return(dataframe_total)
}
thing <- plot_data(manual_check = FALSE)
tgc <- Rmisc::summarySE(thing, measurevar="gsw", groupvars=c("elapsed","PAR1", "deltaPAR"))
tgc <- Rmisc::summarySE(thing, measurevar="A", groupvars=c("elapsed", "PAR1", "deltaPAR"))
tgc$PAR1 <- as.factor(tgc$PAR1)
tgc$deltaPAR <- as.factor(tgc$deltaPAR)
ggplot(tgc, aes(elapsed, A)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = A - se, ymax = A + se, fill = PAR1), alpha = 0.5) +
facet_grid(. ~ deltaPAR)
thing2 <- thing[!grepl(0, thing$deltaPAR),]
thing2 <- thing[thing$deltaPAR != 0]
thing2 <- thing[thing$deltaPAR != 0]
View(thing)
thing3 <- thing[thing$deltaPAR != 0]
thing3 <- thing[thing$deltaPAR != 60]
thing[thing$deltaPAR != 60]
thing2 <- thing[thing$deltaPAR != 90]
thing3 <- thing[thing$deltaPAR != 90]
thing$deltaPAR != 90
thing2 <- thing[thing$deltaPAR != 90, ]
thing2 <- thing[thing$deltaPAR != 40, ]
thing <- thing[thing$deltaPAR != 40, ]
thing <- thing[thing$deltaPAR != 90, ]
thing <- thing[thing$deltaPAR != 190, ]
tgc <- Rmisc::summarySE(thing, measurevar="A", groupvars=c("elapsed", "PAR1", "deltaPAR"))
tgc$PAR1 <- as.factor(tgc$PAR1)
tgc$deltaPAR <- as.factor(tgc$deltaPAR)
ggplot(tgc, aes(elapsed, A)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = A - se, ymax = A + se, fill = PAR1), alpha = 0.5) +
facet_grid(. ~ deltaPAR)
ggplot(tgc, aes(elapsed, A)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = A - se, ymax = A + se, fill = PAR1), alpha = 0.5) +
facet_grid(. ~ deltaPAR) +
xlim(-50, 1600)
plot_data <- function(manual_check = TRUE){
#make empty data frame
dataframe_total <- data.frame()
#check all the files
file_list <- list_licorfiles("input_directory_licorfiles/photosynthetic_induction_data")
#calculate the photosynthetic induction parameters for all files
for (filename in file_list) {
#create the pathname
filepath <- paste0("input_directory_licorfiles/",
"photosynthetic_induction_data/",
filename)
#read the file
parameters <- c('elapsed', 'A', 'Ci', 'Qin', 'gsw')
dataframe <- read_licorfile(filepath = filepath, parameters = parameters)
#get light parameters
lightinductionparameters <- calculate_light_induction_parameters(dataframe)
lightinductionindex <- lightinductionparameters[[1]]
PAR1 = lightinductionparameters[[4]]
PAR2 = lightinductionparameters[[5]]
#if light decrease index exists then that is the end of the data
if ("light_decay_index" %in% names(lightinductionparameters)) {
end_index = lightinductionparameters[["light_decay_index"]] - 1
} else {
end_index = length(dataframe$gsw)
}
#plot data
gsw <- dataframe[["gsw"]][(lightinductionindex-50):end_index]
elapsed <- dataframe[["elapsed"]][(lightinductionindex-50):end_index]-dataframe[["elapsed"]][[lightinductionindex]]
plot(x = elapsed, y = gsw)
if (manual_check) {
user_input <- readline(prompt = "(y/n)")
} else {
user_input <- "y"
}
if (user_input == "y") {
#add the values to the dataframe
dataframe_part <- data.frame(
gsw = gsw,
elapsed = plyr::round_any(elapsed, 2),
PAR1 = PAR1,
PAR2 = PAR2,
deltaPAR = PAR2 - PAR1
)
dataframe_total <- bind_rows(dataframe_total, dataframe_part)
}
}
return(dataframe_total)
}
writexl::write_xlsx(x = tgc,
path = "output_directory_licorfiles/excel_files/set-set_A_averaged.xlsx",
col_names = TRUE,
format_headers = FALSE)
writexl::write_xlsx(x = thing,
path = "output_directory_licorfiles/excel_files/set-set_A_all.xlsx",
col_names = TRUE,
format_headers = FALSE)
thing <- plot_data(manual_check = FALSE)
tgc <- Rmisc::summarySE(thing, measurevar="gsw", groupvars=c("elapsed", "PAR1", "deltaPAR"))
tgc$PAR1 <- as.factor(tgc$PAR1)
tgc$deltaPAR <- as.factor(tgc$deltaPAR)
ggplot(tgc, aes(elapsed, gsw)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = gsw - se, ymax = gsw + se, fill = PAR1), alpha = 0.5) +
facet_grid(. ~ deltaPAR)
thing <- thing[thing$deltaPAR != 40, ]
thing <- thing[thing$deltaPAR != 90, ]
thing <- thing[thing$deltaPAR != 190, ]
tgc <- Rmisc::summarySE(thing, measurevar="gsw", groupvars=c("elapsed", "PAR1", "deltaPAR"))
tgc$PAR1 <- as.factor(tgc$PAR1)
tgc$deltaPAR <- as.factor(tgc$deltaPAR)
ggplot(tgc, aes(elapsed, gsw)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = gsw - se, ymax = gsw + se, fill = PAR1), alpha = 0.5) +
facet_grid(. ~ deltaPAR)
ggplot(tgc, aes(elapsed, gsw)) +
geom_line(mapping = aes(colour = PAR1)) +
geom_ribbon(mapping = aes(ymin = gsw - se, ymax = gsw + se, fill = PAR1), alpha = 0.5) +
facet_grid(. ~ deltaPAR) +
xlim(-50, 1600)
writexl::write_xlsx(x = thing,
path = "output_directory_licorfiles/excel_files/set-set_gsw_all.xlsx",
col_names = TRUE,
format_headers = FALSE)
writexl::write_xlsx(x = tgc,
path = "output_directory_licorfiles/excel_files/set-set_gsw_average.xlsx",
col_names = TRUE,
format_headers = FALSE)
library(HandlingLicorFiles)
#start the document
startup()
library(HandlingLicorFiles)
library(HandlingLicorFiles)
library(HandlingLicorFiles)
library(HandlingLicorFiles)
library(HandlingLicorFiles)
set_1000_set_dataframe <- read_xlsx("output_directory_licorfiles/excel_files/set-1000-set/2021-12-01 17h11m41 PI fitting.xlsx")
View(set_1000_set_dataframe)
new_combined_dataframe <- read_xlsx("output_directory_licorfiles/excel_files/set-set/combined_database.xlsx")
View(new_combined_dataframe)
new_combined_dataframe["lightstep"]
strsplit(x = new_combined_dataframe["lightstep"], split = "-")
stringr::str_split(string = new_combined_dataframe["lightstep"], pattern = "-")
stringr::str_split(string = new_combined_dataframe["lightstep"], pattern = "-")[1]
stringr::str_split(string = new_combined_dataframe["lightstep"], pattern = "-")[[1]]
class(stringr::str_split(string = new_combined_dataframe["lightstep"], pattern = "-"))
tzz <- stringr::str_split(string = new_combined_dataframe["lightstep"], pattern = "-")
tzz[1]
tzz[[1]]
stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", 2)
View(new_combined_dataframe)
stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", 2)[1]
class(stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", 2))
new_combined_dataframe <- c(new_combined_dataframe, stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", 2))
View(new_combined_dataframe)
new_combined_dataframe <- read_xlsx("output_directory_licorfiles/excel_files/set-set/combined_database.xlsx")
string = new_combined_dataframe$lightstep, pattern = "-", 1
string = new_combined_dataframe$lightstep, pattern = "-", 1)
stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 1)
new_combined_dataframe <- c(new_combined_dataframe, stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 1))
new_combined_dataframe <- read_xlsx("output_directory_licorfiles/excel_files/set-set/combined_database.xlsx")
new_combined_dataframe <- c(new_combined_dataframe, as.data.frame(stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 1)))
View(new_combined_dataframe)
new_combined_dataframe <- read_xlsx("output_directory_licorfiles/excel_files/set-set/combined_database.xlsx")
new_combined_dataframe <- c(new_combined_dataframe, data.frame(stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 1)))
new_combined_dataframe <- read_xlsx("output_directory_licorfiles/excel_files/set-set/combined_database.xlsx")
new_combined_dataframe <- cbind(new_combined_dataframe, data.frame(stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 1)))
View(new_combined_dataframe)
new_combined_dataframe <- read_xlsx("output_directory_licorfiles/excel_files/set-set/combined_database.xlsx")
splitboy <- data.frame(stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 1))
View(splitboy)
splitboy <- stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 1)
splitboy <- stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 2)
View(splitboy)
splitboy <- stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 2)[1]
splitboy <- stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 2)
splitboynice <- splitboy[1]
splitboynice <- splitboy["V1"]
class(splitboy)
splitboynice <- splitboy[1, ]
splitboynice <- splitboy[, 1]
dataframepie <- data.frame(PAR1 = splitboynice)
new_combined_dataframe <- cbind(new_combined_dataframe, dataframepie)
View(new_combined_dataframe)
splitboynice <- splitboy[, 2]
dataframepie <- data.frame(PAR2 = splitboynice)
new_combined_dataframe <- cbind(new_combined_dataframe, dataframepie)
View(new_combined_dataframe)
new_combined_dataframe$deltaPAR <- new_combined_dataframe$PAR2-new_combined_dataframe$PAR1
View(new_combined_dataframe)
new_combined_dataframe <- numeric_dataframe(new_combined_dataframe)
View(new_combined_dataframe)
new_combined_dataframe <- read_xlsx("output_directory_licorfiles/excel_files/set-set/combined_database.xlsx")
splitboy <- stringr::str_split_fixed(string = new_combined_dataframe$lightstep, pattern = "-", n = 2)
splitboynice <- splitboy[, 1]
dataframepie <- data.frame(PAR2 = as.numeric(splitboynice))
dataframepie <- data.frame(PAR1 = as.numeric(splitboynice))
new_combined_dataframe <- cbind(new_combined_dataframe, dataframepie)
splitboynice <- splitboy[, 2]
dataframepie <- data.frame(PAR2 = as.numeric(splitboynice))
new_combined_dataframe <- cbind(new_combined_dataframe, dataframepie)
View(new_combined_dataframe)
new_combined_dataframe$deltaPAR <- new_combined_dataframe$PAR2 - new_combined_dataframe$PAR1
set_1000_set_dataframe$source <- "set-1000-set"
new_combined_dataframe$source <- "set-set"
total_dataframe <- dplyr::bind_rows(set_1000_set_dataframe, new_combined_dataframe)
View(total_dataframe)
View(set_1000_set_dataframe)
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "A_fit...15")] <- "A_fit"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "A_RSS...16")] <- "A_RSS"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "A_TSS...17")] <- "A_TSS"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "A_Rsq...18")] <- "A_Rsq"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "A2...20")] <- "A_2"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "A_2")] <- "A2"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "Ci_fit...23")] <- "Ci_fit"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "Ci_RSS...24")] <- "Ci_RSS"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "Ci_TSS...25")] <- "Ci_TSS"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "Ci_Rsq...26")] <- "Ci_Rsq"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "Ci3...28")] <- "Ci3"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "k1...30...28")] <- "k1"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "k1...30")] <- "k1"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "k2...31")] <- "k2"
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "t0...32")] <- "t0"
total_dataframe <- dplyr::bind_rows(set_1000_set_dataframe, new_combined_dataframe)
View(total_dataframe)
colnames(set_1000_set_dataframe)[which(names(set_1000_set_dataframe) == "A_fit")] <- "A_state"
total_dataframe <- cbind(set_1000_set_dataframe, new_combined_dataframe)
total_dataframe <- rbind(set_1000_set_dataframe, new_combined_dataframe)
total_dataframe <- rbind(set_1000_set_dataframe, new_combined_dataframe, fill = NA)
total_dataframe <- dplyr::bind_rows(set_1000_set_dataframe, new_combined_dataframe)
total_dataframe <- dplyr::bind_rows(set_1000_set_dataframe, new_combined_dataframe)
install.packages("ggpubr")
install.packages("cowplot")
#calculate all the photosynthetic induction fit parameters
name_parameters <- c("date", "lightstep", "RH", "CO2", "plant")
#true analysis
set_set_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = FALSE,
save_plots = FALSE,
name_parameters = name_parameters)
library(HandlingLicorFiles)
#start the document
startup()
#true analysis
set_set_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = FALSE,
save_plots = FALSE,
name_parameters = name_parameters)
set_1000_set_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = c("lightstep",
"RH",
"CO2",
"plant",
"date"))
###analysis of set-1000-set database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE)
###analysis of set-1000-set database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE)
set_1000_set_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = c("lightstep",
"RH",
"CO2",
"plant",
"date"))
View(set_set_dataframe)
###analysis of set-1000-set database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE)
set_1000_set_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = c("lightstep",
"RH",
"CO2",
"plant",
"date"))
###analysis of set-1000-set database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE)
###analysis of set-1000-set database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE)
library(HandlingLicorFiles)
#start the document
startup()
testding <- analyse_licorfile(pathname = "input_directory_licorfiles/photosynthetic_induction_data/20220118 PI 0-1000 75 400 greenpaper2")
View(testding)
name_parameters <- c("date", "name", "lightstep", "RH", "CO2", "species", "number", "plant")
rand_rand_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = TRUE,
save_plots = TRUE,
decay_tails = FALSE,
name_parameters = name_parameters)
###analysis of rand-rand database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
###analysis of rand-rand database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
###analysis of rand-rand database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
###analysis of rand-rand database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
###analysis of rand-rand database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
###analysis of rand-rand database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
rand_rand_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = TRUE,
save_plots = TRUE,
decay_tails = FALSE,
name_parameters = name_parameters)
library(cowplot)
View(rand_rand_dataframe)
#cool graphs
p1 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaPAR, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p2 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaA, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p3 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaCi, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p4 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = PAR1, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
legend <- get_legend(
# create some space to the left of the legend
p1 + theme(legend.box.margin = margin(0, 0, 0, 12))
)
pg <- plot_grid(
p1 + theme(legend.position="none"), p2 + theme(legend.position="none"), legend,
p3 + theme(legend.position="none"), p4 + theme(legend.position="none"), NULL,
labels = c("A", "B", NA, "C", "D", NA), ncol = 3, label_size = 12, rel_widths = c(1.8, 1.8, .5)
)
save_plot(filename = "t50 for species.png", plot = pg)
rand_rand_dataframe$deltaPAR <- rand_rand_dataframe$PAR2 - rand_rand_dataframe$PAR1
#cool graphs
p1 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaPAR, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p2 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaA, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p3 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaCi, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p4 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = PAR1, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
legend <- get_legend(
# create some space to the left of the legend
p1 + theme(legend.box.margin = margin(0, 0, 0, 12))
)
pg <- plot_grid(
p1 + theme(legend.position="none"), p2 + theme(legend.position="none"), legend,
p3 + theme(legend.position="none"), p4 + theme(legend.position="none"), NULL,
labels = c("A", "B", NA, "C", "D", NA), ncol = 3, label_size = 12, rel_widths = c(1.8, 1.8, .5)
)
save_plot(filename = "t50 for species.png", plot = pg)
rand_rand_dataframe <- rand_rand_dataframe[rand_rand_dataframe$species != "l1", ]
rand_rand_dataframe <- rand_rand_dataframe[rand_rand_dataframe$species != "p22", ]
rand_rand_dataframe <- rand_rand_dataframe[rand_rand_dataframe$species != "t2", ]
#cool graphs
p1 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaPAR, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p2 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaA, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p3 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaCi, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p4 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = PAR1, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
legend <- get_legend(
# create some space to the left of the legend
p1 + theme(legend.box.margin = margin(0, 0, 0, 12))
)
pg <- plot_grid(
p1 + theme(legend.position="none"), p2 + theme(legend.position="none"), legend,
p3 + theme(legend.position="none"), p4 + theme(legend.position="none"), NULL,
labels = c("A", "B", NA, "C", "D", NA), ncol = 3, label_size = 12, rel_widths = c(1.8, 1.8, .5)
)
save_plot(filename = "t50 for species2.png", plot = pg)
rand_rand_dataframe <- rand_rand_dataframe[rand_rand_dataframe$PAR1 != 0, ]
#cool graphs
p1 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaPAR, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p2 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaA, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p3 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = deltaCi, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
p4 <- ggplot(data = rand_rand_dataframe, mapping = aes(x = PAR1, y = t50, colour = species)) +
geom_point(size = 1) +
stat_smooth(method = "lm", se=FALSE, size = 0.5) + theme_cowplot(12)
legend <- get_legend(
# create some space to the left of the legend
p1 + theme(legend.box.margin = margin(0, 0, 0, 12))
)
pg <- plot_grid(
p1 + theme(legend.position="none"), p2 + theme(legend.position="none"), legend,
p3 + theme(legend.position="none"), p4 + theme(legend.position="none"), NULL,
labels = c("A", "B", NA, "C", "D", NA), ncol = 3, label_size = 12, rel_widths = c(1.8, 1.8, .5)
)
save_plot(filename = "t50 for species2 (nozero).png", plot = pg)
