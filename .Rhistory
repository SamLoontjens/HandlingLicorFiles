View(daaadddda)
analyse_licorfile(filepath)
library(HandlingLicorFiles)
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20210308 PI 600-800 75RH 400CO2 T.xlsx"
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
library(HandlingLicorFiles)
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
library(HandlingLicorFiles)
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
View(daaadddda)
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7_.xls"
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
library(HandlingLicorFiles)
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20210308 PI 600-800 75RH 400CO2 T.xlsx"
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7_.xls"
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
library(HandlingLicorFiles)
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7_.xls"
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
aaa2 <- readr::read_csv(filepath)
aaa2 <- readr::read_file(filepath)
aaa2 <- readr::read_lines(filepath)
aaa2 <- read.table(filepath)
pathname <- "input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 610-710 75 400 T t37 p3"
analyse_licorfile(pathname = pathname, calculate_means = TRUE)
library(HandlingLicorFiles)
analyse_licorfile(pathname = pathname, calculate_means = TRUE)
#do the startup after every build
startup()
pathname <- "input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 610-710 75 400 T t37 p3"
analyse_licorfile(pathname = pathname, calculate_means = TRUE)
library(HandlingLicorFiles)
#start the document
startup()
#calculate all the photosynthetic induction fit parameters
name_parameters <- c("date", "name", "lightstep", "RH", "CO2", "species", "number", "plant")
#check for critical errors
PIdataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
name_parameters = name_parameters)
#check for critical errors
PIdataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
name_parameters = name_parameters)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
View(tt)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7", parameters = c("A", "Ci"))
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7", parameters = c("A", "Ci"))
View(tt)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7", parameters = c("A", "Ci"))
View(dataframe)
dataframe[1]
dataframe[[1]]
remarklist <<- which(is.na(suppressWarnings(apply(dataframe[[1]], 2, as.numeric))))
as.numeric(dataframe[[1]]
remarklist <<- which(is.na(suppressWarnings(as.numeric(dataframe[[1]]))))
View(dataframe)
dataframe[[1]]
as.numeric(dataframe[[1]]
as.numeric(dataframe[[1]])
remarklist <<- which(is.na(as.numeric(dataframe[[1]])))
View(dataframe)
dataframe <<- dataframe[-remarklist, ]
View(dataframe)
library(HandlingLicorFiles)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7", parameters = c("A", "Ci"))
View(tt)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
View(tt)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
#analysis of set-1000-set database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
View(tt)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
is.na(tt$A)
is.na(tt$RHcham)
which(x = tt$RHcham, arr.ind = is.na())
which(x = tt$RHcham, arr.ind = is.na)
which(is.na(tt$RHcham))
which(is.na(tt$Obs))
library(HandlingLicorFiles)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
View(normalized_dataframe)
library(HandlingLicorFiles)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
View(normalized_dataframe)
library(HandlingLicorFiles)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
View(dataframe)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
View(tt)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
View(tt)
which(is.na(tt$Obs))
library(HandlingLicorFiles)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
View(tt)
which(is.na(dataframe$Obs)
print
View(dataframe)
remarklist <- suppressWarnings(which(is.na(dataframe[[1]])))
remarklist <- suppressWarnings(which(is.numeric(dataframe[[1]])))
which(as.numeric(dataframe[[1]]
3
remarklist <- suppressWarnings(which(as.numeric(dataframe[[1]])))
#remove remarks, namely all rows that are not an integer
#OLD# remarklist <- which(dataframe[1] == 'Remark=')
#OLD# if (length(remarklist) >= 1) {
#OLD#   dataframe <- dataframe[-remarklist, ]
#OLD# }
remarklist <- suppressWarnings(which(is.numeric(as.numeric(dataframe[[1]]))))
dataframe[1]
dataframe[[1]]
as.numeric(dataframe[[1]])
is.na(as.numeric(dataframe[[1]]))
remarklist <- suppressWarnings(is.na(as.numeric(dataframe[[1]])))
dataframe <- dataframe[-remarklist, ]
View(dataframe)
dataframe <- dataframe[, remarklist]
dataframe <- dataframe[remarklist]
dataframe <- dataframe[remarklist, ]
View(dataframe)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
View(dataframe)
dataframe <- dataframe[-remarklist, ]
#remove remarks, namely all rows that are not an integer
#OLD# remarklist <- which(dataframe[1] == 'Remark=')
#OLD# if (length(remarklist) >= 1) {
#OLD#   dataframe <- dataframe[-remarklist, ]
#OLD# }
remarklist <- suppressWarnings(which(is.na(as.numeric(dataframe[[1]])) == FALSE))
#remove remarks, namely all rows that are not an integer
#OLD# remarklist <- which(dataframe[1] == 'Remark=')
#OLD# if (length(remarklist) >= 1) {
#OLD#   dataframe <- dataframe[-remarklist, ]
#OLD# }
remarklist <- suppressWarnings(which(is.na(as.numeric(dataframe[[1]])) == TRUE))
dataframe <- dataframe[-remarklist, ]
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
library(HandlingLicorFiles)
View(tt)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
View(normalized_dataframe)
library(HandlingLicorFiles)
library(HandlingLicorFiles)
#start the document
startup()
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
library(HandlingLicorFiles)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 0-240 75 400 T t3 p5")
library(HandlingLicorFiles)
#analysis of set-1000-set database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE)
#analyze licorfiles
analyse_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
View(tt)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
library(HandlingLicorFiles)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
dataframe <- dataframe[-remarklist, ]
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
which(is.na(as.numeric(dataframe[[1]])) == TRUE)
View(dataframe)
library(HandlingLicorFiles)
tt <- read_licorfile("input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7")
library(HandlingLicorFiles)
#analysis of set-1000-set database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE)
View(testt)
name_parameters <- c("date", "name", "lightstep", "RH", "CO2", "species", "number", "plant")
zero_rand_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
View(zero_rand_dataframe)
library(HandlingLicorFiles)
#analysis of 0-rand database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
View(testt)
#analysis of 0-rand database
testt <- calculate_all_photosynthetic_induction_parameters(manual_check = FALSE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
View(zero_rand_dataframe)
View(tt)
View(testt)
zero_rand_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = FALSE,
save_plots = FALSE,
decay_tails = FALSE,
name_parameters = name_parameters)
View(zero_rand_dataframe)
ggplot(data = zero_rand_dataframe, mapping = aes(x = delta_A, y = t50)) +
geom_point(mapping = aes(color = species)) +
stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
#for trend lines
titlestring <- "t50 over delta_A by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = delta_A, y = t50)) +
geom_point(mapping = aes(color = species)) +
stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
#for trend lines
titlestring <- "t50 over deltaA by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaA, y = t50)) +
geom_point(mapping = aes(color = species)) +
stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaA, y = t50)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
#for trend lines
titlestring <- "t50 over deltaPAR by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = PAR2-PAR1, y = t50)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
#for trend lines
titlestring <- "t50 over delta_temp by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = delta_temp, y = t50)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
ggplot(data = zero_rand_dataframe, mapping = aes(x = delta_temp, y = t50)) +
geom_point(mapping = aes(color = PAR1)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
#for trend lines
titlestring <- "deltaA over deltaCi by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaA, y = deltaCi)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaA, y = deltaCi)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
#stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaA, y = deltaCi)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
#for trend lines
titlestring <- "t50 over deltaCi by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaCi, y = deltaCi)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaCi, y = t50)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
titlestring <- "t50 density by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = t50)) +
geom_density(mapping = aes(color = species)) +
geom_density() +
ggtitle(titlestring)
library(HandlingLicorFiles)
#start the document
startup()
zero_rand_dataframe <- calculate_all_photosynthetic_induction_parameters(manual_check = TRUE,
write_excel = TRUE,
save_plots = TRUE,
decay_tails = FALSE,
name_parameters = name_parameters)
titlestring <- "t50 density by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = t50)) +
geom_density(mapping = aes(color = species)) +
geom_density() +
ggtitle(titlestring)
ggsave(paste("output_directory_licorfiles/plots/", titlestring, ".png", sep = ""))
#for trend lines
titlestring <- "t50 over deltaCi by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaCi, y = t50)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
ggsave(paste("output_directory_licorfiles/plots/", titlestring, ".png", sep = ""))
#for trend lines
titlestring <- "t50 over deltaA by species"
ggplot(data = zero_rand_dataframe, mapping = aes(x = deltaA, y = t50)) +
geom_point(mapping = aes(color = species)) +
#stat_ellipse(mapping = aes(color = species)) +
stat_smooth(mapping = aes(color = species), method = "lm", se=FALSE) +
stat_smooth(method = "lm", se=FALSE, color = "black") +
ggtitle(titlestring)
ggsave(paste("output_directory_licorfiles/plots/", titlestring, ".png", sep = ""))
f1 <- as.formula(y ~ 2 * x + 6)
f2 <- as.formula(y ~ 3 * x + 5)
formula_list <- list(f1, f2)
formula_list[1]
formula_list[[1]]
class(formula_list[[1]])
list(list(),list())
formula_list[1]
formula_list[1][2]
formula_list[[1]][2]
formula_list[[1]][1]
formula_list[[1]][[2]]
library(HandlingLicorFiles)
xvalues <- 1:100
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
formula_list[1]
formula_list[[1]]
class(formula_list[1])
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
xvalues <- 1:100
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5 + rnorm(10)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5 + rnorm(30)
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5 + rnorm(30)
xvalues <- 1:100
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5 + rnorm(30)
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5
yvalues <- yvalues +  + rnorm(10)
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5
yvalues <- yvalues + rnorm(10)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5
yvalues <- yvalues + rnorm(50)
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5
yvalues <- yvalues + rnorm(n = 1)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
yvalues <- yvalues + rnorm(n = 2)
yvalues <- yvalues + rnorm(n = 2)
yvalues <- yvalues + rnorm(n = 2)
yvalues <- yvalues + rnorm(n = 2)
yvalues <- yvalues + rnorm(n = 2)
yvalues <- yvalues + rnorm(n = 2)*5
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
2
library(HandlingLicorFiles)
xvalues <- 1:100
yvalues <- 3 * xvalues^2 + 4 * xvalues + 5
yvalues <- yvalues + rnorm(n = 2)*5
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
library(HandlingLicorFiles)
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7_.xls"
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20210308 PI 600-800 75RH 400CO2 T.xlsx"
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
#do the startup after every build
startup()
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20211104 PI 0-750 75 400 T t7 p7_.xls"
daaadddda <- read_licorfile(filepath, parameters = c("A", "Ci", "elapsed"))
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20210308 PI 1000-1200 75RH 400CO2 T.xlsx"
daaadddda <- read_licorfile(filepath = filepath, parameters = c("A", "Ci", "elapsed"))
xvalues <- daaadddda$elapsed
yvalues <- daaadddda$A
View(daaadddda)
xvalues <- daaadddda$elapsed[20:100]
yvalues <- daaadddda$A[20:100]
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
library(HandlingLicorFiles)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
filepath <- "input_directory_licorfiles/photosynthetic_induction_data/20211105 PI 610-710 75 400 T t37 p3"
daaadddda <- read_licorfile(filepath = filepath, parameters = c("A", "Ci", "elapsed"))
View(daaadddda)
xvalues <- daaadddda$elapsed
yvalues <- daaadddda$A
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
yvalues <- daaadddda$A[1000:3000]
xvalues <- daaadddda$elapsed[1000:3000]
yvalues <- daaadddda$A[1000:3000]
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
library(HandlingLicorFiles)
nice <- fit_multiple_curves(x = xvalues, y = yvalues, save_plot = TRUE, show_try = TRUE)
